import java.nio.file.Paths
import groovy.json.JsonSlurper

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def dartEnvironmentVariables = []
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

def dartDefine = [
        WEBTRIT_APP_ID_SUFFIX  : project.findProperty('WEBTRIT_APP_ID_SUFFIX') ?: dartEnvironmentVariables["WEBTRIT_APP_ID_SUFFIX"] ?: '',
        WEBTRIT_APP_LINK_DOMAIN: project.findProperty('WEBTRIT_APP_LINK_DOMAIN') ?: dartEnvironmentVariables["WEBTRIT_APP_LINK_DOMAIN"] ?: 'app.webtrit.com',
        WEBTRIT_APP_NAME       : project.findProperty('WEBTRIT_APP_NAME') ?: dartEnvironmentVariables["WEBTRIT_APP_NAME"] ?: 'WebTrit',
]

def envDefine = [
        WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH: System.env.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH ?: dartEnvironmentVariables["WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH"]
]

def keystoreMetadata
def keystoreFile
if (envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH != null) {
    def keystoreMetadataPath = Paths.get(envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH, "upload-keystore-metadata.json")
    def keystoreMetadataFile = rootProject.file(keystoreMetadataPath)
    println("Release signing configs retrieved from the metadata file: $keystoreMetadataFile")

    keystoreMetadata = new JsonSlurper().parse(keystoreMetadataFile)

    def keystorePath = Paths.get(envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH, keystoreMetadata.storeFile)
    keystoreFile = rootProject.file(keystorePath)
} else {
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        println("Release signing configs retrieved from the properties file: $keystorePropertiesFile")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        keystoreMetadata = new ConfigSlurper().parse(keystoreProperties)

        def keystorePath = Paths.get(keystoreMetadata.storeFile)
        keystoreFile = rootProject.file(keystorePath)
    } else {
        println("Release signing configs have not been provided.")
    }
}

android {
    namespace "com.webtrit.app"
    compileSdkVersion 33 // flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.webtrit.app"
        applicationIdSuffix dartDefine.WEBTRIT_APP_ID_SUFFIX
        minSdkVersion 26 // flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        resValue "string", "APP_LINK_DOMAIN", dartDefine.WEBTRIT_APP_LINK_DOMAIN
        resValue "string", "APP_NAME", dartDefine.WEBTRIT_APP_NAME
    }

    signingConfigs {
        release {
            keyAlias keystoreMetadata.keyAlias
            keyPassword keystoreMetadata.keyPassword
            storeFile keystoreFile
            storePassword keystoreMetadata.storePassword
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
