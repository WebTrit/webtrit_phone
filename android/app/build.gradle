import java.nio.file.Paths
import groovy.json.JsonSlurper

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def projectPropertyDartDefines = [:];
if (project.hasProperty('dart-defines')) {
    projectPropertyDartDefines += project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                if (pair.size() > 1) {
                    [(pair.first()): pair.last()]
                } else {
                    [(pair.first()): '']
                }
            }
}

def dartDefine = [WEBTRIT_APP_LINK_DOMAIN: projectPropertyDartDefines['WEBTRIT_APP_LINK_DOMAIN'] ?: 'app.webtrit.com',
                  WEBTRIT_APP_NAME       : projectPropertyDartDefines['WEBTRIT_APP_NAME'] ?: 'WebTrit',]

def envDefine = [WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH: projectPropertyDartDefines['WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH'] ?: '',
                 WEBTRIT_HTTP_ALLOWED_DOMAINS        : projectPropertyDartDefines['WEBTRIT_HTTP_ALLOWED_DOMAINS'] ?: '',]

def generateNetworkSecurityConfig = tasks.register("generateNetworkSecurityConfig") {
    doLast {
        // Parse and validate domain definitions passed from dart-define; reject any malformed entries
        def rawDomainDefs = (envDefine['WEBTRIT_HTTP_ALLOWED_DOMAINS'] ?: '').split(';')

        def invalidDomains = []
        // Transform raw semicolon-separated input into a list of [domain, includeSubdomains] entries,
        // applying validation and using false as default for includeSubdomains
        def domainEntries = rawDomainDefs
                .collect { it.trim() }
                .findAll { it }
                .collect { entry ->
                    def parts = entry.split(',')
                    def domain = parts[0].trim()
                    def includeSub = (parts.size() > 1) ? parts[1].trim().toLowerCase() == 'true' : false
                    def isValid = !domain.contains('/') && !domain.contains(':') && !domain.startsWith('http')
                    if (!isValid) {
                        invalidDomains << entry
                    }
                    return [domain: domain, includeSubdomains: includeSub, isValid: isValid]
                }
                .findAll { it.isValid }

        // Stop build if any invalid domains are detected
        if (!invalidDomains.isEmpty()) {
            throw new GradleException("❌ Invalid domain entries found in WEBTRIT_ANDROID_HTTP_ALLOWED_DOMAINS:\n${invalidDomains.join('\n')}")
        }

        // Exit early if no valid domains were provided
        if (domainEntries.isEmpty()) {
            println "⚠️  No valid HTTP domain entries defined, skipping network_security_config.xml generation."
            return
        }

        // Generate the network_security_config.xml content
        def xmlContent = new StringBuilder()
        xmlContent << '<?xml version="1.0" encoding="utf-8"?>\n'
        xmlContent << '<network-security-config>\n'
        domainEntries.each { entry ->
            xmlContent << '    <domain-config cleartextTrafficPermitted="true">\n'
            xmlContent << "        <domain includeSubdomains=\"${entry.includeSubdomains}\">${entry.domain}</domain>\n"
            xmlContent << '    </domain-config>\n'
        }
        xmlContent << '    <base-config cleartextTrafficPermitted="false" />\n'
        xmlContent << '</network-security-config>\n'

        def outputFile = file("$projectDir/src/main/res/xml/network_security_config.xml")
        outputFile.parentFile.mkdirs()
        outputFile.text = xmlContent.toString()

        println "✅  Generated network_security_config.xml with entries: ${domainEntries}"
    }
}

def keystoreMetadata
def keystoreFile
if (!envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH.isEmpty()) {
    def keystoreMetadataPath = Paths.get(envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH, "upload-keystore-metadata.json")
    def keystoreMetadataFile = rootProject.file(keystoreMetadataPath)
    println("Release signing configs retrieved from the metadata file: $keystoreMetadataFile")

    keystoreMetadata = new JsonSlurper().parse(keystoreMetadataFile)

    def keystorePath = Paths.get(envDefine.WEBTRIT_ANDROID_RELEASE_UPLOAD_KEYSTORE_PATH, keystoreMetadata.storeFile)
    keystoreFile = rootProject.file(keystorePath)
} else {
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        println("Release signing configs retrieved from the properties file: $keystorePropertiesFile")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        keystoreMetadata = new ConfigSlurper().parse(keystoreProperties)

        def keystorePath = Paths.get(keystoreMetadata.storeFile)
        keystoreFile = rootProject.file(keystorePath)
    } else {
        println("Release signing configs have not been provided.")
    }
}

android {
    namespace "com.webtrit.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.webtrit.app"
        minSdkVersion 26 // flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        resValue "string", "APP_LINK_DOMAIN", dartDefine.WEBTRIT_APP_LINK_DOMAIN
        resValue "string", "APP_NAME", dartDefine.WEBTRIT_APP_NAME
    }

    signingConfigs {
        release {
            keyAlias keystoreMetadata.keyAlias
            keyPassword keystoreMetadata.keyPassword
            storeFile keystoreFile
            storePassword keystoreMetadata.storePassword
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
    preBuild.dependsOn generateNetworkSecurityConfig
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
}
