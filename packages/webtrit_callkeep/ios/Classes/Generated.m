// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Generated.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation WTPHandleTypeEnumBox
- (instancetype)initWithValue:(WTPHandleTypeEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation WTPEndCallReasonEnumBox
- (instancetype)initWithValue:(WTPEndCallReasonEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation WTPIncomingCallErrorEnumBox
- (instancetype)initWithValue:(WTPIncomingCallErrorEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation WTPCallRequestErrorEnumBox
- (instancetype)initWithValue:(WTPCallRequestErrorEnum)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface WTPIOSOptions ()
+ (WTPIOSOptions *)fromList:(NSArray *)list;
+ (nullable WTPIOSOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WTPOptions ()
+ (WTPOptions *)fromList:(NSArray *)list;
+ (nullable WTPOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WTPHandle ()
+ (WTPHandle *)fromList:(NSArray *)list;
+ (nullable WTPHandle *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WTPEndCallReason ()
+ (WTPEndCallReason *)fromList:(NSArray *)list;
+ (nullable WTPEndCallReason *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WTPIncomingCallError ()
+ (WTPIncomingCallError *)fromList:(NSArray *)list;
+ (nullable WTPIncomingCallError *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface WTPCallRequestError ()
+ (WTPCallRequestError *)fromList:(NSArray *)list;
+ (nullable WTPCallRequestError *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation WTPIOSOptions
+ (instancetype)makeWithLocalizedName:(NSString *)localizedName
    ringtoneSound:(nullable NSString *)ringtoneSound
    iconTemplateImageAssetName:(nullable NSString *)iconTemplateImageAssetName
    maximumCallGroups:(NSInteger )maximumCallGroups
    maximumCallsPerCallGroup:(NSInteger )maximumCallsPerCallGroup
    supportsHandleTypeGeneric:(nullable NSNumber *)supportsHandleTypeGeneric
    supportsHandleTypePhoneNumber:(nullable NSNumber *)supportsHandleTypePhoneNumber
    supportsHandleTypeEmailAddress:(nullable NSNumber *)supportsHandleTypeEmailAddress
    supportsVideo:(BOOL )supportsVideo
    includesCallsInRecents:(BOOL )includesCallsInRecents
    driveIdleTimerDisabled:(BOOL )driveIdleTimerDisabled {
  WTPIOSOptions* pigeonResult = [[WTPIOSOptions alloc] init];
  pigeonResult.localizedName = localizedName;
  pigeonResult.ringtoneSound = ringtoneSound;
  pigeonResult.iconTemplateImageAssetName = iconTemplateImageAssetName;
  pigeonResult.maximumCallGroups = maximumCallGroups;
  pigeonResult.maximumCallsPerCallGroup = maximumCallsPerCallGroup;
  pigeonResult.supportsHandleTypeGeneric = supportsHandleTypeGeneric;
  pigeonResult.supportsHandleTypePhoneNumber = supportsHandleTypePhoneNumber;
  pigeonResult.supportsHandleTypeEmailAddress = supportsHandleTypeEmailAddress;
  pigeonResult.supportsVideo = supportsVideo;
  pigeonResult.includesCallsInRecents = includesCallsInRecents;
  pigeonResult.driveIdleTimerDisabled = driveIdleTimerDisabled;
  return pigeonResult;
}
+ (WTPIOSOptions *)fromList:(NSArray *)list {
  WTPIOSOptions *pigeonResult = [[WTPIOSOptions alloc] init];
  pigeonResult.localizedName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.ringtoneSound = GetNullableObjectAtIndex(list, 1);
  pigeonResult.iconTemplateImageAssetName = GetNullableObjectAtIndex(list, 2);
  pigeonResult.maximumCallGroups = [GetNullableObjectAtIndex(list, 3) integerValue];
  pigeonResult.maximumCallsPerCallGroup = [GetNullableObjectAtIndex(list, 4) integerValue];
  pigeonResult.supportsHandleTypeGeneric = GetNullableObjectAtIndex(list, 5);
  pigeonResult.supportsHandleTypePhoneNumber = GetNullableObjectAtIndex(list, 6);
  pigeonResult.supportsHandleTypeEmailAddress = GetNullableObjectAtIndex(list, 7);
  pigeonResult.supportsVideo = [GetNullableObjectAtIndex(list, 8) boolValue];
  pigeonResult.includesCallsInRecents = [GetNullableObjectAtIndex(list, 9) boolValue];
  pigeonResult.driveIdleTimerDisabled = [GetNullableObjectAtIndex(list, 10) boolValue];
  return pigeonResult;
}
+ (nullable WTPIOSOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPIOSOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.localizedName ?: [NSNull null],
    self.ringtoneSound ?: [NSNull null],
    self.iconTemplateImageAssetName ?: [NSNull null],
    @(self.maximumCallGroups),
    @(self.maximumCallsPerCallGroup),
    self.supportsHandleTypeGeneric ?: [NSNull null],
    self.supportsHandleTypePhoneNumber ?: [NSNull null],
    self.supportsHandleTypeEmailAddress ?: [NSNull null],
    @(self.supportsVideo),
    @(self.includesCallsInRecents),
    @(self.driveIdleTimerDisabled),
  ];
}
@end

@implementation WTPOptions
+ (instancetype)makeWithIos:(WTPIOSOptions *)ios {
  WTPOptions* pigeonResult = [[WTPOptions alloc] init];
  pigeonResult.ios = ios;
  return pigeonResult;
}
+ (WTPOptions *)fromList:(NSArray *)list {
  WTPOptions *pigeonResult = [[WTPOptions alloc] init];
  pigeonResult.ios = [WTPIOSOptions nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  return pigeonResult;
}
+ (nullable WTPOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.ios ? [self.ios toList] : [NSNull null]),
  ];
}
@end

@implementation WTPHandle
+ (instancetype)makeWithType:(WTPHandleTypeEnum)type
    value:(NSString *)value {
  WTPHandle* pigeonResult = [[WTPHandle alloc] init];
  pigeonResult.type = type;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (WTPHandle *)fromList:(NSArray *)list {
  WTPHandle *pigeonResult = [[WTPHandle alloc] init];
  pigeonResult.type = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.value = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable WTPHandle *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPHandle fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.type),
    self.value ?: [NSNull null],
  ];
}
@end

@implementation WTPEndCallReason
+ (instancetype)makeWithValue:(WTPEndCallReasonEnum)value {
  WTPEndCallReason* pigeonResult = [[WTPEndCallReason alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (WTPEndCallReason *)fromList:(NSArray *)list {
  WTPEndCallReason *pigeonResult = [[WTPEndCallReason alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable WTPEndCallReason *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPEndCallReason fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.value),
  ];
}
@end

@implementation WTPIncomingCallError
+ (instancetype)makeWithValue:(WTPIncomingCallErrorEnum)value {
  WTPIncomingCallError* pigeonResult = [[WTPIncomingCallError alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (WTPIncomingCallError *)fromList:(NSArray *)list {
  WTPIncomingCallError *pigeonResult = [[WTPIncomingCallError alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable WTPIncomingCallError *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPIncomingCallError fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.value),
  ];
}
@end

@implementation WTPCallRequestError
+ (instancetype)makeWithValue:(WTPCallRequestErrorEnum)value {
  WTPCallRequestError* pigeonResult = [[WTPCallRequestError alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (WTPCallRequestError *)fromList:(NSArray *)list {
  WTPCallRequestError *pigeonResult = [[WTPCallRequestError alloc] init];
  pigeonResult.value = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable WTPCallRequestError *)nullableFromList:(NSArray *)list {
  return (list) ? [WTPCallRequestError fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.value),
  ];
}
@end

@interface WTPHostApiCodecReader : FlutterStandardReader
@end
@implementation WTPHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [WTPCallRequestError fromList:[self readValue]];
    case 129: 
      return [WTPEndCallReason fromList:[self readValue]];
    case 130: 
      return [WTPHandle fromList:[self readValue]];
    case 131: 
      return [WTPHandle fromList:[self readValue]];
    case 132: 
      return [WTPIOSOptions fromList:[self readValue]];
    case 133: 
      return [WTPIncomingCallError fromList:[self readValue]];
    case 134: 
      return [WTPOptions fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface WTPHostApiCodecWriter : FlutterStandardWriter
@end
@implementation WTPHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[WTPCallRequestError class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPEndCallReason class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPHandle class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPHandle class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPIOSOptions class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPIncomingCallError class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPOptions class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface WTPHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation WTPHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[WTPHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[WTPHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *WTPHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    WTPHostApiCodecReaderWriter *readerWriter = [[WTPHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpWTPHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<WTPHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.isSetUp"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isSetUp:)], @"WTPHostApi api (%@) doesn't respond to @selector(isSetUp:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isSetUp:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.setUp"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUp:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(setUp:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        WTPOptions *arg_options = GetNullableObjectAtIndex(args, 0);
        [api setUp:arg_options completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.tearDown"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(tearDown:)], @"WTPHostApi api (%@) doesn't respond to @selector(tearDown:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api tearDown:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportNewIncomingCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportNewIncomingCall:handle:displayName:hasVideo:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(reportNewIncomingCall:handle:displayName:hasVideo:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        WTPHandle *arg_handle = GetNullableObjectAtIndex(args, 1);
        NSString *arg_displayName = GetNullableObjectAtIndex(args, 2);
        BOOL arg_hasVideo = [GetNullableObjectAtIndex(args, 3) boolValue];
        [api reportNewIncomingCall:arg_uuidString handle:arg_handle displayName:arg_displayName hasVideo:arg_hasVideo completion:^(WTPIncomingCallError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportConnectingOutgoingCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportConnectingOutgoingCall:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(reportConnectingOutgoingCall:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        [api reportConnectingOutgoingCall:arg_uuidString completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportConnectedOutgoingCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportConnectedOutgoingCall:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(reportConnectedOutgoingCall:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        [api reportConnectedOutgoingCall:arg_uuidString completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportUpdateCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUpdateCall:handle:displayName:hasVideo:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(reportUpdateCall:handle:displayName:hasVideo:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        WTPHandle *arg_handle = GetNullableObjectAtIndex(args, 1);
        NSString *arg_displayName = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_hasVideo = GetNullableObjectAtIndex(args, 3);
        [api reportUpdateCall:arg_uuidString handle:arg_handle displayName:arg_displayName hasVideo:arg_hasVideo completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportEndCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEndCall:reason:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(reportEndCall:reason:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        WTPEndCallReason *arg_reason = GetNullableObjectAtIndex(args, 1);
        [api reportEndCall:arg_uuidString reason:arg_reason completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.startCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startCall:handle:displayNameOrContactIdentifier:video:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(startCall:handle:displayNameOrContactIdentifier:video:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        WTPHandle *arg_handle = GetNullableObjectAtIndex(args, 1);
        NSString *arg_displayNameOrContactIdentifier = GetNullableObjectAtIndex(args, 2);
        BOOL arg_video = [GetNullableObjectAtIndex(args, 3) boolValue];
        [api startCall:arg_uuidString handle:arg_handle displayNameOrContactIdentifier:arg_displayNameOrContactIdentifier video:arg_video completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.answerCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(answerCall:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(answerCall:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        [api answerCall:arg_uuidString completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.endCall"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endCall:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(endCall:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        [api endCall:arg_uuidString completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.setHeld"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setHeld:onHold:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(setHeld:onHold:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        BOOL arg_onHold = [GetNullableObjectAtIndex(args, 1) boolValue];
        [api setHeld:arg_uuidString onHold:arg_onHold completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.setMuted"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMuted:muted:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(setMuted:muted:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        BOOL arg_muted = [GetNullableObjectAtIndex(args, 1) boolValue];
        [api setMuted:arg_uuidString muted:arg_muted completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PHostApi.sendDTMF"
        binaryMessenger:binaryMessenger
        codec:WTPHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendDTMF:key:completion:)], @"WTPHostApi api (%@) doesn't respond to @selector(sendDTMF:key:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_uuidString = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        [api sendDTMF:arg_uuidString key:arg_key completion:^(WTPCallRequestError *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface WTPDelegateFlutterApiCodecReader : FlutterStandardReader
@end
@implementation WTPDelegateFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [WTPHandle fromList:[self readValue]];
    case 129: 
      return [WTPIncomingCallError fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface WTPDelegateFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation WTPDelegateFlutterApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[WTPHandle class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[WTPIncomingCallError class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface WTPDelegateFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation WTPDelegateFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[WTPDelegateFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[WTPDelegateFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *WTPDelegateFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    WTPDelegateFlutterApiCodecReaderWriter *readerWriter = [[WTPDelegateFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface WTPDelegateFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation WTPDelegateFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)continueStartCallIntentHandle:(WTPHandle *)arg_handle displayName:(nullable NSString *)arg_displayName video:(BOOL)arg_video completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.continueStartCallIntent";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_handle ?: [NSNull null], arg_displayName ?: [NSNull null], @(arg_video)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)didPushIncomingCallHandle:(WTPHandle *)arg_handle displayName:(nullable NSString *)arg_displayName video:(BOOL)arg_video callId:(NSString *)arg_callId uuid:(NSString *)arg_uuidString error:(nullable WTPIncomingCallError *)arg_error completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didPushIncomingCall";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_handle ?: [NSNull null], arg_displayName ?: [NSNull null], @(arg_video), arg_callId ?: [NSNull null], arg_uuidString ?: [NSNull null], arg_error ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)performStartCall:(NSString *)arg_uuidString handle:(WTPHandle *)arg_handle displayNameOrContactIdentifier:(nullable NSString *)arg_displayNameOrContactIdentifier video:(BOOL)arg_video completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performStartCall";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null], arg_handle ?: [NSNull null], arg_displayNameOrContactIdentifier ?: [NSNull null], @(arg_video)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)performAnswerCall:(NSString *)arg_uuidString completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performAnswerCall";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)performEndCall:(NSString *)arg_uuidString completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performEndCall";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)performSetHeld:(NSString *)arg_uuidString onHold:(BOOL)arg_onHold completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSetHeld";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null], @(arg_onHold)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)performSetMuted:(NSString *)arg_uuidString muted:(BOOL)arg_muted completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSetMuted";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null], @(arg_muted)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)performSendDTMF:(NSString *)arg_uuidString key:(NSString *)arg_key completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSendDTMF";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_uuidString ?: [NSNull null], arg_key ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion(nil, [FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        NSNumber *output = reply[0] == [NSNull null] ? nil : reply[0];
        completion(output, nil);
      }
    } else {
      completion(nil, createConnectionError(channelName));
    } 
  }];
}
- (void)didActivateAudioSession:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didActivateAudioSession";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)didDeactivateAudioSession:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didDeactivateAudioSession";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)didReset:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didReset";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPDelegateFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

NSObject<FlutterMessageCodec> *WTPPushRegistryHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpWTPPushRegistryHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<WTPPushRegistryHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.webtrit_callkeep.PPushRegistryHostApi.pushTokenForPushTypeVoIP"
        binaryMessenger:binaryMessenger
        codec:WTPPushRegistryHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pushTokenForPushTypeVoIP:)], @"WTPPushRegistryHostApi api (%@) doesn't respond to @selector(pushTokenForPushTypeVoIP:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api pushTokenForPushTypeVoIP:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *WTPPushRegistryDelegateFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface WTPPushRegistryDelegateFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation WTPPushRegistryDelegateFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)didUpdatePushTokenForPushTypeVoIP:(nullable NSString *)arg_token completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = @"dev.flutter.pigeon.webtrit_callkeep.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP";
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:WTPPushRegistryDelegateFlutterApiGetCodec()];
  [channel sendMessage:@[arg_token ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

