// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.webtrit.callkeep;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Generated {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum PHandleTypeEnum {
    GENERIC(0),
    NUMBER(1),
    EMAIL(2);

    final int index;

    private PHandleTypeEnum(final int index) {
      this.index = index;
    }
  }

  public enum PEndCallReasonEnum {
    FAILED(0),
    REMOTE_ENDED(1),
    UNANSWERED(2),
    ANSWERED_ELSEWHERE(3),
    DECLINED_ELSEWHERE(4),
    MISSED(5);

    final int index;

    private PEndCallReasonEnum(final int index) {
      this.index = index;
    }
  }

  public enum PIncomingCallErrorEnum {
    UNKNOWN(0),
    UNENTITLED(1),
    CALL_UUID_ALREADY_EXISTS(2),
    FILTERED_BY_DO_NOT_DISTURB(3),
    FILTERED_BY_BLOCK_LIST(4),
    INTERNAL(5);

    final int index;

    private PIncomingCallErrorEnum(final int index) {
      this.index = index;
    }
  }

  public enum PCallRequestErrorEnum {
    UNKNOWN(0),
    UNENTITLED(1),
    UNKNOWN_CALL_UUID(2),
    CALL_UUID_ALREADY_EXISTS(3),
    MAXIMUM_CALL_GROUPS_REACHED(4),
    INTERNAL(5);

    final int index;

    private PCallRequestErrorEnum(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PIOSOptions {
    private @NonNull String localizedName;

    public @NonNull String getLocalizedName() {
      return localizedName;
    }

    public void setLocalizedName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"localizedName\" is null.");
      }
      this.localizedName = setterArg;
    }

    private @Nullable String ringtoneSound;

    public @Nullable String getRingtoneSound() {
      return ringtoneSound;
    }

    public void setRingtoneSound(@Nullable String setterArg) {
      this.ringtoneSound = setterArg;
    }

    private @Nullable String iconTemplateImageAssetName;

    public @Nullable String getIconTemplateImageAssetName() {
      return iconTemplateImageAssetName;
    }

    public void setIconTemplateImageAssetName(@Nullable String setterArg) {
      this.iconTemplateImageAssetName = setterArg;
    }

    private @NonNull Long maximumCallGroups;

    public @NonNull Long getMaximumCallGroups() {
      return maximumCallGroups;
    }

    public void setMaximumCallGroups(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maximumCallGroups\" is null.");
      }
      this.maximumCallGroups = setterArg;
    }

    private @NonNull Long maximumCallsPerCallGroup;

    public @NonNull Long getMaximumCallsPerCallGroup() {
      return maximumCallsPerCallGroup;
    }

    public void setMaximumCallsPerCallGroup(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maximumCallsPerCallGroup\" is null.");
      }
      this.maximumCallsPerCallGroup = setterArg;
    }

    private @Nullable Boolean supportsHandleTypeGeneric;

    public @Nullable Boolean getSupportsHandleTypeGeneric() {
      return supportsHandleTypeGeneric;
    }

    public void setSupportsHandleTypeGeneric(@Nullable Boolean setterArg) {
      this.supportsHandleTypeGeneric = setterArg;
    }

    private @Nullable Boolean supportsHandleTypePhoneNumber;

    public @Nullable Boolean getSupportsHandleTypePhoneNumber() {
      return supportsHandleTypePhoneNumber;
    }

    public void setSupportsHandleTypePhoneNumber(@Nullable Boolean setterArg) {
      this.supportsHandleTypePhoneNumber = setterArg;
    }

    private @Nullable Boolean supportsHandleTypeEmailAddress;

    public @Nullable Boolean getSupportsHandleTypeEmailAddress() {
      return supportsHandleTypeEmailAddress;
    }

    public void setSupportsHandleTypeEmailAddress(@Nullable Boolean setterArg) {
      this.supportsHandleTypeEmailAddress = setterArg;
    }

    private @NonNull Boolean supportsVideo;

    public @NonNull Boolean getSupportsVideo() {
      return supportsVideo;
    }

    public void setSupportsVideo(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsVideo\" is null.");
      }
      this.supportsVideo = setterArg;
    }

    private @NonNull Boolean includesCallsInRecents;

    public @NonNull Boolean getIncludesCallsInRecents() {
      return includesCallsInRecents;
    }

    public void setIncludesCallsInRecents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"includesCallsInRecents\" is null.");
      }
      this.includesCallsInRecents = setterArg;
    }

    private @NonNull Boolean driveIdleTimerDisabled;

    public @NonNull Boolean getDriveIdleTimerDisabled() {
      return driveIdleTimerDisabled;
    }

    public void setDriveIdleTimerDisabled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"driveIdleTimerDisabled\" is null.");
      }
      this.driveIdleTimerDisabled = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PIOSOptions() {}

    public static final class Builder {

      private @Nullable String localizedName;

      public @NonNull Builder setLocalizedName(@NonNull String setterArg) {
        this.localizedName = setterArg;
        return this;
      }

      private @Nullable String ringtoneSound;

      public @NonNull Builder setRingtoneSound(@Nullable String setterArg) {
        this.ringtoneSound = setterArg;
        return this;
      }

      private @Nullable String iconTemplateImageAssetName;

      public @NonNull Builder setIconTemplateImageAssetName(@Nullable String setterArg) {
        this.iconTemplateImageAssetName = setterArg;
        return this;
      }

      private @Nullable Long maximumCallGroups;

      public @NonNull Builder setMaximumCallGroups(@NonNull Long setterArg) {
        this.maximumCallGroups = setterArg;
        return this;
      }

      private @Nullable Long maximumCallsPerCallGroup;

      public @NonNull Builder setMaximumCallsPerCallGroup(@NonNull Long setterArg) {
        this.maximumCallsPerCallGroup = setterArg;
        return this;
      }

      private @Nullable Boolean supportsHandleTypeGeneric;

      public @NonNull Builder setSupportsHandleTypeGeneric(@Nullable Boolean setterArg) {
        this.supportsHandleTypeGeneric = setterArg;
        return this;
      }

      private @Nullable Boolean supportsHandleTypePhoneNumber;

      public @NonNull Builder setSupportsHandleTypePhoneNumber(@Nullable Boolean setterArg) {
        this.supportsHandleTypePhoneNumber = setterArg;
        return this;
      }

      private @Nullable Boolean supportsHandleTypeEmailAddress;

      public @NonNull Builder setSupportsHandleTypeEmailAddress(@Nullable Boolean setterArg) {
        this.supportsHandleTypeEmailAddress = setterArg;
        return this;
      }

      private @Nullable Boolean supportsVideo;

      public @NonNull Builder setSupportsVideo(@NonNull Boolean setterArg) {
        this.supportsVideo = setterArg;
        return this;
      }

      private @Nullable Boolean includesCallsInRecents;

      public @NonNull Builder setIncludesCallsInRecents(@NonNull Boolean setterArg) {
        this.includesCallsInRecents = setterArg;
        return this;
      }

      private @Nullable Boolean driveIdleTimerDisabled;

      public @NonNull Builder setDriveIdleTimerDisabled(@NonNull Boolean setterArg) {
        this.driveIdleTimerDisabled = setterArg;
        return this;
      }

      public @NonNull PIOSOptions build() {
        PIOSOptions pigeonReturn = new PIOSOptions();
        pigeonReturn.setLocalizedName(localizedName);
        pigeonReturn.setRingtoneSound(ringtoneSound);
        pigeonReturn.setIconTemplateImageAssetName(iconTemplateImageAssetName);
        pigeonReturn.setMaximumCallGroups(maximumCallGroups);
        pigeonReturn.setMaximumCallsPerCallGroup(maximumCallsPerCallGroup);
        pigeonReturn.setSupportsHandleTypeGeneric(supportsHandleTypeGeneric);
        pigeonReturn.setSupportsHandleTypePhoneNumber(supportsHandleTypePhoneNumber);
        pigeonReturn.setSupportsHandleTypeEmailAddress(supportsHandleTypeEmailAddress);
        pigeonReturn.setSupportsVideo(supportsVideo);
        pigeonReturn.setIncludesCallsInRecents(includesCallsInRecents);
        pigeonReturn.setDriveIdleTimerDisabled(driveIdleTimerDisabled);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(11);
      toListResult.add(localizedName);
      toListResult.add(ringtoneSound);
      toListResult.add(iconTemplateImageAssetName);
      toListResult.add(maximumCallGroups);
      toListResult.add(maximumCallsPerCallGroup);
      toListResult.add(supportsHandleTypeGeneric);
      toListResult.add(supportsHandleTypePhoneNumber);
      toListResult.add(supportsHandleTypeEmailAddress);
      toListResult.add(supportsVideo);
      toListResult.add(includesCallsInRecents);
      toListResult.add(driveIdleTimerDisabled);
      return toListResult;
    }

    static @NonNull PIOSOptions fromList(@NonNull ArrayList<Object> list) {
      PIOSOptions pigeonResult = new PIOSOptions();
      Object localizedName = list.get(0);
      pigeonResult.setLocalizedName((String) localizedName);
      Object ringtoneSound = list.get(1);
      pigeonResult.setRingtoneSound((String) ringtoneSound);
      Object iconTemplateImageAssetName = list.get(2);
      pigeonResult.setIconTemplateImageAssetName((String) iconTemplateImageAssetName);
      Object maximumCallGroups = list.get(3);
      pigeonResult.setMaximumCallGroups((maximumCallGroups == null) ? null : ((maximumCallGroups instanceof Integer) ? (Integer) maximumCallGroups : (Long) maximumCallGroups));
      Object maximumCallsPerCallGroup = list.get(4);
      pigeonResult.setMaximumCallsPerCallGroup((maximumCallsPerCallGroup == null) ? null : ((maximumCallsPerCallGroup instanceof Integer) ? (Integer) maximumCallsPerCallGroup : (Long) maximumCallsPerCallGroup));
      Object supportsHandleTypeGeneric = list.get(5);
      pigeonResult.setSupportsHandleTypeGeneric((Boolean) supportsHandleTypeGeneric);
      Object supportsHandleTypePhoneNumber = list.get(6);
      pigeonResult.setSupportsHandleTypePhoneNumber((Boolean) supportsHandleTypePhoneNumber);
      Object supportsHandleTypeEmailAddress = list.get(7);
      pigeonResult.setSupportsHandleTypeEmailAddress((Boolean) supportsHandleTypeEmailAddress);
      Object supportsVideo = list.get(8);
      pigeonResult.setSupportsVideo((Boolean) supportsVideo);
      Object includesCallsInRecents = list.get(9);
      pigeonResult.setIncludesCallsInRecents((Boolean) includesCallsInRecents);
      Object driveIdleTimerDisabled = list.get(10);
      pigeonResult.setDriveIdleTimerDisabled((Boolean) driveIdleTimerDisabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class POptions {
    private @NonNull PIOSOptions ios;

    public @NonNull PIOSOptions getIos() {
      return ios;
    }

    public void setIos(@NonNull PIOSOptions setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ios\" is null.");
      }
      this.ios = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    POptions() {}

    public static final class Builder {

      private @Nullable PIOSOptions ios;

      public @NonNull Builder setIos(@NonNull PIOSOptions setterArg) {
        this.ios = setterArg;
        return this;
      }

      public @NonNull POptions build() {
        POptions pigeonReturn = new POptions();
        pigeonReturn.setIos(ios);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add((ios == null) ? null : ios.toList());
      return toListResult;
    }

    static @NonNull POptions fromList(@NonNull ArrayList<Object> list) {
      POptions pigeonResult = new POptions();
      Object ios = list.get(0);
      pigeonResult.setIos((ios == null) ? null : PIOSOptions.fromList((ArrayList<Object>) ios));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PHandle {
    private @NonNull PHandleTypeEnum type;

    public @NonNull PHandleTypeEnum getType() {
      return type;
    }

    public void setType(@NonNull PHandleTypeEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PHandle() {}

    public static final class Builder {

      private @Nullable PHandleTypeEnum type;

      public @NonNull Builder setType(@NonNull PHandleTypeEnum setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String value;

      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull PHandle build() {
        PHandle pigeonReturn = new PHandle();
        pigeonReturn.setType(type);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type == null ? null : type.index);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull PHandle fromList(@NonNull ArrayList<Object> list) {
      PHandle pigeonResult = new PHandle();
      Object type = list.get(0);
      pigeonResult.setType(type == null ? null : PHandleTypeEnum.values()[(int) type]);
      Object value = list.get(1);
      pigeonResult.setValue((String) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PEndCallReason {
    private @NonNull PEndCallReasonEnum value;

    public @NonNull PEndCallReasonEnum getValue() {
      return value;
    }

    public void setValue(@NonNull PEndCallReasonEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PEndCallReason() {}

    public static final class Builder {

      private @Nullable PEndCallReasonEnum value;

      public @NonNull Builder setValue(@NonNull PEndCallReasonEnum setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull PEndCallReason build() {
        PEndCallReason pigeonReturn = new PEndCallReason();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(value == null ? null : value.index);
      return toListResult;
    }

    static @NonNull PEndCallReason fromList(@NonNull ArrayList<Object> list) {
      PEndCallReason pigeonResult = new PEndCallReason();
      Object value = list.get(0);
      pigeonResult.setValue(value == null ? null : PEndCallReasonEnum.values()[(int) value]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PIncomingCallError {
    private @NonNull PIncomingCallErrorEnum value;

    public @NonNull PIncomingCallErrorEnum getValue() {
      return value;
    }

    public void setValue(@NonNull PIncomingCallErrorEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PIncomingCallError() {}

    public static final class Builder {

      private @Nullable PIncomingCallErrorEnum value;

      public @NonNull Builder setValue(@NonNull PIncomingCallErrorEnum setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull PIncomingCallError build() {
        PIncomingCallError pigeonReturn = new PIncomingCallError();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(value == null ? null : value.index);
      return toListResult;
    }

    static @NonNull PIncomingCallError fromList(@NonNull ArrayList<Object> list) {
      PIncomingCallError pigeonResult = new PIncomingCallError();
      Object value = list.get(0);
      pigeonResult.setValue(value == null ? null : PIncomingCallErrorEnum.values()[(int) value]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PCallRequestError {
    private @NonNull PCallRequestErrorEnum value;

    public @NonNull PCallRequestErrorEnum getValue() {
      return value;
    }

    public void setValue(@NonNull PCallRequestErrorEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PCallRequestError() {}

    public static final class Builder {

      private @Nullable PCallRequestErrorEnum value;

      public @NonNull Builder setValue(@NonNull PCallRequestErrorEnum setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull PCallRequestError build() {
        PCallRequestError pigeonReturn = new PCallRequestError();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(value == null ? null : value.index);
      return toListResult;
    }

    static @NonNull PCallRequestError fromList(@NonNull ArrayList<Object> list) {
      PCallRequestError pigeonResult = new PCallRequestError();
      Object value = list.get(0);
      pigeonResult.setValue(value == null ? null : PCallRequestErrorEnum.values()[(int) value]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PHostApiCodec extends StandardMessageCodec {
    public static final PHostApiCodec INSTANCE = new PHostApiCodec();

    private PHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PCallRequestError.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PEndCallReason.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PHandle.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PHandle.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PIOSOptions.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PIncomingCallError.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return POptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PCallRequestError) {
        stream.write(128);
        writeValue(stream, ((PCallRequestError) value).toList());
      } else if (value instanceof PEndCallReason) {
        stream.write(129);
        writeValue(stream, ((PEndCallReason) value).toList());
      } else if (value instanceof PHandle) {
        stream.write(130);
        writeValue(stream, ((PHandle) value).toList());
      } else if (value instanceof PHandle) {
        stream.write(131);
        writeValue(stream, ((PHandle) value).toList());
      } else if (value instanceof PIOSOptions) {
        stream.write(132);
        writeValue(stream, ((PIOSOptions) value).toList());
      } else if (value instanceof PIncomingCallError) {
        stream.write(133);
        writeValue(stream, ((PIncomingCallError) value).toList());
      } else if (value instanceof POptions) {
        stream.write(134);
        writeValue(stream, ((POptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PHostApi {

    @NonNull 
    Boolean isSetUp();

    void setUp(@NonNull POptions options, @NonNull Result<Void> result);

    void tearDown(@NonNull Result<Void> result);

    void reportNewIncomingCall(@NonNull String uuidString, @NonNull PHandle handle, @Nullable String displayName, @NonNull Boolean hasVideo, @NonNull Result<PIncomingCallError> result);

    void reportConnectingOutgoingCall(@NonNull String uuidString, @NonNull Result<Void> result);

    void reportConnectedOutgoingCall(@NonNull String uuidString, @NonNull Result<Void> result);

    void reportUpdateCall(@NonNull String uuidString, @Nullable PHandle handle, @Nullable String displayName, @Nullable Boolean hasVideo, @NonNull Result<Void> result);

    void reportEndCall(@NonNull String uuidString, @NonNull PEndCallReason reason, @NonNull Result<Void> result);

    void startCall(@NonNull String uuidString, @NonNull PHandle handle, @Nullable String displayNameOrContactIdentifier, @NonNull Boolean video, @NonNull Result<PCallRequestError> result);

    void answerCall(@NonNull String uuidString, @NonNull Result<PCallRequestError> result);

    void endCall(@NonNull String uuidString, @NonNull Result<PCallRequestError> result);

    void setHeld(@NonNull String uuidString, @NonNull Boolean onHold, @NonNull Result<PCallRequestError> result);

    void setMuted(@NonNull String uuidString, @NonNull Boolean muted, @NonNull Result<PCallRequestError> result);

    void sendDTMF(@NonNull String uuidString, @NonNull String key, @NonNull Result<PCallRequestError> result);

    /** The codec used by PHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.isSetUp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isSetUp();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.setUp", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                POptions optionsArg = (POptions) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setUp(optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.tearDown", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.tearDown(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportNewIncomingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                PHandle handleArg = (PHandle) args.get(1);
                String displayNameArg = (String) args.get(2);
                Boolean hasVideoArg = (Boolean) args.get(3);
                Result<PIncomingCallError> resultCallback =
                    new Result<PIncomingCallError>() {
                      public void success(PIncomingCallError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reportNewIncomingCall(uuidStringArg, handleArg, displayNameArg, hasVideoArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportConnectingOutgoingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reportConnectingOutgoingCall(uuidStringArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportConnectedOutgoingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reportConnectedOutgoingCall(uuidStringArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportUpdateCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                PHandle handleArg = (PHandle) args.get(1);
                String displayNameArg = (String) args.get(2);
                Boolean hasVideoArg = (Boolean) args.get(3);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reportUpdateCall(uuidStringArg, handleArg, displayNameArg, hasVideoArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.reportEndCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                PEndCallReason reasonArg = (PEndCallReason) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.reportEndCall(uuidStringArg, reasonArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.startCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                PHandle handleArg = (PHandle) args.get(1);
                String displayNameOrContactIdentifierArg = (String) args.get(2);
                Boolean videoArg = (Boolean) args.get(3);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startCall(uuidStringArg, handleArg, displayNameOrContactIdentifierArg, videoArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.answerCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.answerCall(uuidStringArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.endCall", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.endCall(uuidStringArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.setHeld", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Boolean onHoldArg = (Boolean) args.get(1);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setHeld(uuidStringArg, onHoldArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.setMuted", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                Boolean mutedArg = (Boolean) args.get(1);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setMuted(uuidStringArg, mutedArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PHostApi.sendDTMF", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String uuidStringArg = (String) args.get(0);
                String keyArg = (String) args.get(1);
                Result<PCallRequestError> resultCallback =
                    new Result<PCallRequestError>() {
                      public void success(PCallRequestError result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.sendDTMF(uuidStringArg, keyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class PDelegateFlutterApiCodec extends StandardMessageCodec {
    public static final PDelegateFlutterApiCodec INSTANCE = new PDelegateFlutterApiCodec();

    private PDelegateFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PHandle.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PIncomingCallError.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PHandle) {
        stream.write(128);
        writeValue(stream, ((PHandle) value).toList());
      } else if (value instanceof PIncomingCallError) {
        stream.write(129);
        writeValue(stream, ((PIncomingCallError) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class PDelegateFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public PDelegateFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PDelegateFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PDelegateFlutterApiCodec.INSTANCE;
    }
    public void continueStartCallIntent(@NonNull PHandle handleArg, @Nullable String displayNameArg, @NonNull Boolean videoArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.continueStartCallIntent", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(handleArg, displayNameArg, videoArg)),
          channelReply -> callback.reply(null));
    }
    public void didPushIncomingCall(@NonNull PHandle handleArg, @Nullable String displayNameArg, @NonNull Boolean videoArg, @NonNull String callIdArg, @NonNull String uuidStringArg, @Nullable PIncomingCallError errorArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didPushIncomingCall", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(handleArg, displayNameArg, videoArg, callIdArg, uuidStringArg, errorArg)),
          channelReply -> callback.reply(null));
    }
    public void performStartCall(@NonNull String uuidStringArg, @NonNull PHandle handleArg, @Nullable String displayNameOrContactIdentifierArg, @NonNull Boolean videoArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performStartCall", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(uuidStringArg, handleArg, displayNameOrContactIdentifierArg, videoArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void performAnswerCall(@NonNull String uuidStringArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performAnswerCall", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(uuidStringArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void performEndCall(@NonNull String uuidStringArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performEndCall", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(uuidStringArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void performSetHeld(@NonNull String uuidStringArg, @NonNull Boolean onHoldArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSetHeld", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(uuidStringArg, onHoldArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void performSetMuted(@NonNull String uuidStringArg, @NonNull Boolean mutedArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSetMuted", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(uuidStringArg, mutedArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void performSendDTMF(@NonNull String uuidStringArg, @NonNull String keyArg, @NonNull Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.performSendDTMF", getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(uuidStringArg, keyArg)),
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            Boolean output = (Boolean) channelReply;
            callback.reply(output);
          });
    }
    public void didActivateAudioSession(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didActivateAudioSession", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void didDeactivateAudioSession(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didDeactivateAudioSession", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
    public void didReset(@NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PDelegateFlutterApi.didReset", getCodec());
      channel.send(
          null,
          channelReply -> callback.reply(null));
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PPushRegistryHostApi {

    @Nullable 
    String pushTokenForPushTypeVoIP();

    /** The codec used by PPushRegistryHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `PPushRegistryHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PPushRegistryHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PPushRegistryHostApi.pushTokenForPushTypeVoIP", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.pushTokenForPushTypeVoIP();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class PPushRegistryDelegateFlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public PPushRegistryDelegateFlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PPushRegistryDelegateFlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    public void didUpdatePushTokenForPushTypeVoIP(@Nullable String tokenArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.webtrit_callkeep.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(tokenArg)),
          channelReply -> callback.reply(null));
    }
  }
}
