// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.webtrit.callkeep;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Generated {

  public enum PHandleTypeEnum {
    generic(0),
    number(1),
    email(2);

    private int index;
    private PHandleTypeEnum(final int index) {
      this.index = index;
    }
  }

  public enum PEndCallReasonEnum {
    failed(0),
    remoteEnded(1),
    unanswered(2),
    answeredElsewhere(3),
    declinedElsewhere(4),
    missed(5);

    private int index;
    private PEndCallReasonEnum(final int index) {
      this.index = index;
    }
  }

  public enum PIncomingCallErrorEnum {
    unknown(0),
    unentitled(1),
    callUuidAlreadyExists(2),
    filteredByDoNotDisturb(3),
    filteredByBlockList(4),
    internal(5);

    private int index;
    private PIncomingCallErrorEnum(final int index) {
      this.index = index;
    }
  }

  public enum PCallRequestErrorEnum {
    unknown(0),
    unentitled(1),
    unknownCallUuid(2),
    callUuidAlreadyExists(3),
    maximumCallGroupsReached(4),
    internal(5);

    private int index;
    private PCallRequestErrorEnum(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PIOSOptions {
    private @NonNull String localizedName;
    public @NonNull String getLocalizedName() { return localizedName; }
    public void setLocalizedName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"localizedName\" is null.");
      }
      this.localizedName = setterArg;
    }

    private @Nullable String ringtoneSound;
    public @Nullable String getRingtoneSound() { return ringtoneSound; }
    public void setRingtoneSound(@Nullable String setterArg) {
      this.ringtoneSound = setterArg;
    }

    private @Nullable String iconTemplateImageAssetName;
    public @Nullable String getIconTemplateImageAssetName() { return iconTemplateImageAssetName; }
    public void setIconTemplateImageAssetName(@Nullable String setterArg) {
      this.iconTemplateImageAssetName = setterArg;
    }

    private @NonNull Long maximumCallGroups;
    public @NonNull Long getMaximumCallGroups() { return maximumCallGroups; }
    public void setMaximumCallGroups(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maximumCallGroups\" is null.");
      }
      this.maximumCallGroups = setterArg;
    }

    private @NonNull Long maximumCallsPerCallGroup;
    public @NonNull Long getMaximumCallsPerCallGroup() { return maximumCallsPerCallGroup; }
    public void setMaximumCallsPerCallGroup(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maximumCallsPerCallGroup\" is null.");
      }
      this.maximumCallsPerCallGroup = setterArg;
    }

    private @Nullable Boolean supportsHandleTypeGeneric;
    public @Nullable Boolean getSupportsHandleTypeGeneric() { return supportsHandleTypeGeneric; }
    public void setSupportsHandleTypeGeneric(@Nullable Boolean setterArg) {
      this.supportsHandleTypeGeneric = setterArg;
    }

    private @Nullable Boolean supportsHandleTypePhoneNumber;
    public @Nullable Boolean getSupportsHandleTypePhoneNumber() { return supportsHandleTypePhoneNumber; }
    public void setSupportsHandleTypePhoneNumber(@Nullable Boolean setterArg) {
      this.supportsHandleTypePhoneNumber = setterArg;
    }

    private @Nullable Boolean supportsHandleTypeEmailAddress;
    public @Nullable Boolean getSupportsHandleTypeEmailAddress() { return supportsHandleTypeEmailAddress; }
    public void setSupportsHandleTypeEmailAddress(@Nullable Boolean setterArg) {
      this.supportsHandleTypeEmailAddress = setterArg;
    }

    private @NonNull Boolean supportsVideo;
    public @NonNull Boolean getSupportsVideo() { return supportsVideo; }
    public void setSupportsVideo(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"supportsVideo\" is null.");
      }
      this.supportsVideo = setterArg;
    }

    private @NonNull Boolean includesCallsInRecents;
    public @NonNull Boolean getIncludesCallsInRecents() { return includesCallsInRecents; }
    public void setIncludesCallsInRecents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"includesCallsInRecents\" is null.");
      }
      this.includesCallsInRecents = setterArg;
    }

    private @NonNull Boolean driveIdleTimerDisabled;
    public @NonNull Boolean getDriveIdleTimerDisabled() { return driveIdleTimerDisabled; }
    public void setDriveIdleTimerDisabled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"driveIdleTimerDisabled\" is null.");
      }
      this.driveIdleTimerDisabled = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PIOSOptions() {}
    public static final class Builder {
      private @Nullable String localizedName;
      public @NonNull Builder setLocalizedName(@NonNull String setterArg) {
        this.localizedName = setterArg;
        return this;
      }
      private @Nullable String ringtoneSound;
      public @NonNull Builder setRingtoneSound(@Nullable String setterArg) {
        this.ringtoneSound = setterArg;
        return this;
      }
      private @Nullable String iconTemplateImageAssetName;
      public @NonNull Builder setIconTemplateImageAssetName(@Nullable String setterArg) {
        this.iconTemplateImageAssetName = setterArg;
        return this;
      }
      private @Nullable Long maximumCallGroups;
      public @NonNull Builder setMaximumCallGroups(@NonNull Long setterArg) {
        this.maximumCallGroups = setterArg;
        return this;
      }
      private @Nullable Long maximumCallsPerCallGroup;
      public @NonNull Builder setMaximumCallsPerCallGroup(@NonNull Long setterArg) {
        this.maximumCallsPerCallGroup = setterArg;
        return this;
      }
      private @Nullable Boolean supportsHandleTypeGeneric;
      public @NonNull Builder setSupportsHandleTypeGeneric(@Nullable Boolean setterArg) {
        this.supportsHandleTypeGeneric = setterArg;
        return this;
      }
      private @Nullable Boolean supportsHandleTypePhoneNumber;
      public @NonNull Builder setSupportsHandleTypePhoneNumber(@Nullable Boolean setterArg) {
        this.supportsHandleTypePhoneNumber = setterArg;
        return this;
      }
      private @Nullable Boolean supportsHandleTypeEmailAddress;
      public @NonNull Builder setSupportsHandleTypeEmailAddress(@Nullable Boolean setterArg) {
        this.supportsHandleTypeEmailAddress = setterArg;
        return this;
      }
      private @Nullable Boolean supportsVideo;
      public @NonNull Builder setSupportsVideo(@NonNull Boolean setterArg) {
        this.supportsVideo = setterArg;
        return this;
      }
      private @Nullable Boolean includesCallsInRecents;
      public @NonNull Builder setIncludesCallsInRecents(@NonNull Boolean setterArg) {
        this.includesCallsInRecents = setterArg;
        return this;
      }
      private @Nullable Boolean driveIdleTimerDisabled;
      public @NonNull Builder setDriveIdleTimerDisabled(@NonNull Boolean setterArg) {
        this.driveIdleTimerDisabled = setterArg;
        return this;
      }
      public @NonNull PIOSOptions build() {
        PIOSOptions pigeonReturn = new PIOSOptions();
        pigeonReturn.setLocalizedName(localizedName);
        pigeonReturn.setRingtoneSound(ringtoneSound);
        pigeonReturn.setIconTemplateImageAssetName(iconTemplateImageAssetName);
        pigeonReturn.setMaximumCallGroups(maximumCallGroups);
        pigeonReturn.setMaximumCallsPerCallGroup(maximumCallsPerCallGroup);
        pigeonReturn.setSupportsHandleTypeGeneric(supportsHandleTypeGeneric);
        pigeonReturn.setSupportsHandleTypePhoneNumber(supportsHandleTypePhoneNumber);
        pigeonReturn.setSupportsHandleTypeEmailAddress(supportsHandleTypeEmailAddress);
        pigeonReturn.setSupportsVideo(supportsVideo);
        pigeonReturn.setIncludesCallsInRecents(includesCallsInRecents);
        pigeonReturn.setDriveIdleTimerDisabled(driveIdleTimerDisabled);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("localizedName", localizedName);
      toMapResult.put("ringtoneSound", ringtoneSound);
      toMapResult.put("iconTemplateImageAssetName", iconTemplateImageAssetName);
      toMapResult.put("maximumCallGroups", maximumCallGroups);
      toMapResult.put("maximumCallsPerCallGroup", maximumCallsPerCallGroup);
      toMapResult.put("supportsHandleTypeGeneric", supportsHandleTypeGeneric);
      toMapResult.put("supportsHandleTypePhoneNumber", supportsHandleTypePhoneNumber);
      toMapResult.put("supportsHandleTypeEmailAddress", supportsHandleTypeEmailAddress);
      toMapResult.put("supportsVideo", supportsVideo);
      toMapResult.put("includesCallsInRecents", includesCallsInRecents);
      toMapResult.put("driveIdleTimerDisabled", driveIdleTimerDisabled);
      return toMapResult;
    }
    static @NonNull PIOSOptions fromMap(@NonNull Map<String, Object> map) {
      PIOSOptions pigeonResult = new PIOSOptions();
      Object localizedName = map.get("localizedName");
      pigeonResult.setLocalizedName((String)localizedName);
      Object ringtoneSound = map.get("ringtoneSound");
      pigeonResult.setRingtoneSound((String)ringtoneSound);
      Object iconTemplateImageAssetName = map.get("iconTemplateImageAssetName");
      pigeonResult.setIconTemplateImageAssetName((String)iconTemplateImageAssetName);
      Object maximumCallGroups = map.get("maximumCallGroups");
      pigeonResult.setMaximumCallGroups((maximumCallGroups == null) ? null : ((maximumCallGroups instanceof Integer) ? (Integer)maximumCallGroups : (Long)maximumCallGroups));
      Object maximumCallsPerCallGroup = map.get("maximumCallsPerCallGroup");
      pigeonResult.setMaximumCallsPerCallGroup((maximumCallsPerCallGroup == null) ? null : ((maximumCallsPerCallGroup instanceof Integer) ? (Integer)maximumCallsPerCallGroup : (Long)maximumCallsPerCallGroup));
      Object supportsHandleTypeGeneric = map.get("supportsHandleTypeGeneric");
      pigeonResult.setSupportsHandleTypeGeneric((Boolean)supportsHandleTypeGeneric);
      Object supportsHandleTypePhoneNumber = map.get("supportsHandleTypePhoneNumber");
      pigeonResult.setSupportsHandleTypePhoneNumber((Boolean)supportsHandleTypePhoneNumber);
      Object supportsHandleTypeEmailAddress = map.get("supportsHandleTypeEmailAddress");
      pigeonResult.setSupportsHandleTypeEmailAddress((Boolean)supportsHandleTypeEmailAddress);
      Object supportsVideo = map.get("supportsVideo");
      pigeonResult.setSupportsVideo((Boolean)supportsVideo);
      Object includesCallsInRecents = map.get("includesCallsInRecents");
      pigeonResult.setIncludesCallsInRecents((Boolean)includesCallsInRecents);
      Object driveIdleTimerDisabled = map.get("driveIdleTimerDisabled");
      pigeonResult.setDriveIdleTimerDisabled((Boolean)driveIdleTimerDisabled);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class POptions {
    private @NonNull PIOSOptions ios;
    public @NonNull PIOSOptions getIos() { return ios; }
    public void setIos(@NonNull PIOSOptions setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ios\" is null.");
      }
      this.ios = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private POptions() {}
    public static final class Builder {
      private @Nullable PIOSOptions ios;
      public @NonNull Builder setIos(@NonNull PIOSOptions setterArg) {
        this.ios = setterArg;
        return this;
      }
      public @NonNull POptions build() {
        POptions pigeonReturn = new POptions();
        pigeonReturn.setIos(ios);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("ios", (ios == null) ? null : ios.toMap());
      return toMapResult;
    }
    static @NonNull POptions fromMap(@NonNull Map<String, Object> map) {
      POptions pigeonResult = new POptions();
      Object ios = map.get("ios");
      pigeonResult.setIos((ios == null) ? null : PIOSOptions.fromMap((Map)ios));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PHandle {
    private @NonNull PHandleTypeEnum type;
    public @NonNull PHandleTypeEnum getType() { return type; }
    public void setType(@NonNull PHandleTypeEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull String value;
    public @NonNull String getValue() { return value; }
    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PHandle() {}
    public static final class Builder {
      private @Nullable PHandleTypeEnum type;
      public @NonNull Builder setType(@NonNull PHandleTypeEnum setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String value;
      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull PHandle build() {
        PHandle pigeonReturn = new PHandle();
        pigeonReturn.setType(type);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull PHandle fromMap(@NonNull Map<String, Object> map) {
      PHandle pigeonResult = new PHandle();
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : PHandleTypeEnum.values()[(int)type]);
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PEndCallReason {
    private @NonNull PEndCallReasonEnum value;
    public @NonNull PEndCallReasonEnum getValue() { return value; }
    public void setValue(@NonNull PEndCallReasonEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PEndCallReason() {}
    public static final class Builder {
      private @Nullable PEndCallReasonEnum value;
      public @NonNull Builder setValue(@NonNull PEndCallReasonEnum setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull PEndCallReason build() {
        PEndCallReason pigeonReturn = new PEndCallReason();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value == null ? null : value.index);
      return toMapResult;
    }
    static @NonNull PEndCallReason fromMap(@NonNull Map<String, Object> map) {
      PEndCallReason pigeonResult = new PEndCallReason();
      Object value = map.get("value");
      pigeonResult.setValue(value == null ? null : PEndCallReasonEnum.values()[(int)value]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PIncomingCallError {
    private @NonNull PIncomingCallErrorEnum value;
    public @NonNull PIncomingCallErrorEnum getValue() { return value; }
    public void setValue(@NonNull PIncomingCallErrorEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PIncomingCallError() {}
    public static final class Builder {
      private @Nullable PIncomingCallErrorEnum value;
      public @NonNull Builder setValue(@NonNull PIncomingCallErrorEnum setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull PIncomingCallError build() {
        PIncomingCallError pigeonReturn = new PIncomingCallError();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value == null ? null : value.index);
      return toMapResult;
    }
    static @NonNull PIncomingCallError fromMap(@NonNull Map<String, Object> map) {
      PIncomingCallError pigeonResult = new PIncomingCallError();
      Object value = map.get("value");
      pigeonResult.setValue(value == null ? null : PIncomingCallErrorEnum.values()[(int)value]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PCallRequestError {
    private @NonNull PCallRequestErrorEnum value;
    public @NonNull PCallRequestErrorEnum getValue() { return value; }
    public void setValue(@NonNull PCallRequestErrorEnum setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PCallRequestError() {}
    public static final class Builder {
      private @Nullable PCallRequestErrorEnum value;
      public @NonNull Builder setValue(@NonNull PCallRequestErrorEnum setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull PCallRequestError build() {
        PCallRequestError pigeonReturn = new PCallRequestError();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value == null ? null : value.index);
      return toMapResult;
    }
    static @NonNull PCallRequestError fromMap(@NonNull Map<String, Object> map) {
      PCallRequestError pigeonResult = new PCallRequestError();
      Object value = map.get("value");
      pigeonResult.setValue(value == null ? null : PCallRequestErrorEnum.values()[(int)value]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class PHostApiCodec extends StandardMessageCodec {
    public static final PHostApiCodec INSTANCE = new PHostApiCodec();
    private PHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PCallRequestError.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PEndCallReason.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PHandle.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return PHandle.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return PIOSOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return PIncomingCallError.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return POptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PCallRequestError) {
        stream.write(128);
        writeValue(stream, ((PCallRequestError) value).toMap());
      } else 
      if (value instanceof PEndCallReason) {
        stream.write(129);
        writeValue(stream, ((PEndCallReason) value).toMap());
      } else 
      if (value instanceof PHandle) {
        stream.write(130);
        writeValue(stream, ((PHandle) value).toMap());
      } else 
      if (value instanceof PHandle) {
        stream.write(131);
        writeValue(stream, ((PHandle) value).toMap());
      } else 
      if (value instanceof PIOSOptions) {
        stream.write(132);
        writeValue(stream, ((PIOSOptions) value).toMap());
      } else 
      if (value instanceof PIncomingCallError) {
        stream.write(133);
        writeValue(stream, ((PIncomingCallError) value).toMap());
      } else 
      if (value instanceof POptions) {
        stream.write(134);
        writeValue(stream, ((POptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PHostApi {
    @NonNull Boolean isSetUp();
    void setUp(@NonNull POptions options, Result<Void> result);
    void tearDown(Result<Void> result);
    void reportNewIncomingCall(@NonNull String uuidString, @NonNull PHandle handle, @Nullable String displayName, @NonNull Boolean hasVideo, Result<PIncomingCallError> result);
    void reportConnectingOutgoingCall(@NonNull String uuidString, Result<Void> result);
    void reportConnectedOutgoingCall(@NonNull String uuidString, Result<Void> result);
    void reportUpdateCall(@NonNull String uuidString, @Nullable PHandle handle, @Nullable String displayName, @Nullable Boolean hasVideo, Result<Void> result);
    void reportEndCall(@NonNull String uuidString, @NonNull PEndCallReason reason, Result<Void> result);
    void startCall(@NonNull String uuidString, @NonNull PHandle handle, @Nullable String displayNameOrContactIdentifier, @NonNull Boolean video, Result<PCallRequestError> result);
    void answerCall(@NonNull String uuidString, Result<PCallRequestError> result);
    void endCall(@NonNull String uuidString, Result<PCallRequestError> result);
    void setHeld(@NonNull String uuidString, @NonNull Boolean onHold, Result<PCallRequestError> result);
    void setMuted(@NonNull String uuidString, @NonNull Boolean muted, Result<PCallRequestError> result);
    void sendDTMF(@NonNull String uuidString, @NonNull String key, Result<PCallRequestError> result);

    /** The codec used by PHostApi. */
    static MessageCodec<Object> getCodec() {
      return PHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.isSetUp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isSetUp();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.setUp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              POptions optionsArg = (POptions)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setUp(optionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.tearDown", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.tearDown(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.reportNewIncomingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              PHandle handleArg = (PHandle)args.get(1);
              if (handleArg == null) {
                throw new NullPointerException("handleArg unexpectedly null.");
              }
              String displayNameArg = (String)args.get(2);
              Boolean hasVideoArg = (Boolean)args.get(3);
              if (hasVideoArg == null) {
                throw new NullPointerException("hasVideoArg unexpectedly null.");
              }
              Result<PIncomingCallError> resultCallback = new Result<PIncomingCallError>() {
                public void success(PIncomingCallError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reportNewIncomingCall(uuidStringArg, handleArg, displayNameArg, hasVideoArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.reportConnectingOutgoingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reportConnectingOutgoingCall(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.reportConnectedOutgoingCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reportConnectedOutgoingCall(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.reportUpdateCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              PHandle handleArg = (PHandle)args.get(1);
              String displayNameArg = (String)args.get(2);
              Boolean hasVideoArg = (Boolean)args.get(3);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reportUpdateCall(uuidStringArg, handleArg, displayNameArg, hasVideoArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.reportEndCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              PEndCallReason reasonArg = (PEndCallReason)args.get(1);
              if (reasonArg == null) {
                throw new NullPointerException("reasonArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.reportEndCall(uuidStringArg, reasonArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.startCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              PHandle handleArg = (PHandle)args.get(1);
              if (handleArg == null) {
                throw new NullPointerException("handleArg unexpectedly null.");
              }
              String displayNameOrContactIdentifierArg = (String)args.get(2);
              Boolean videoArg = (Boolean)args.get(3);
              if (videoArg == null) {
                throw new NullPointerException("videoArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startCall(uuidStringArg, handleArg, displayNameOrContactIdentifierArg, videoArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.answerCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.answerCall(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.endCall", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.endCall(uuidStringArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.setHeld", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Boolean onHoldArg = (Boolean)args.get(1);
              if (onHoldArg == null) {
                throw new NullPointerException("onHoldArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setHeld(uuidStringArg, onHoldArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.setMuted", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              Boolean mutedArg = (Boolean)args.get(1);
              if (mutedArg == null) {
                throw new NullPointerException("mutedArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setMuted(uuidStringArg, mutedArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PHostApi.sendDTMF", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String uuidStringArg = (String)args.get(0);
              if (uuidStringArg == null) {
                throw new NullPointerException("uuidStringArg unexpectedly null.");
              }
              String keyArg = (String)args.get(1);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Result<PCallRequestError> resultCallback = new Result<PCallRequestError>() {
                public void success(PCallRequestError result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.sendDTMF(uuidStringArg, keyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PDelegateFlutterApiCodec extends StandardMessageCodec {
    public static final PDelegateFlutterApiCodec INSTANCE = new PDelegateFlutterApiCodec();
    private PDelegateFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PHandle.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PIncomingCallError.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PHandle) {
        stream.write(128);
        writeValue(stream, ((PHandle) value).toMap());
      } else 
      if (value instanceof PIncomingCallError) {
        stream.write(129);
        writeValue(stream, ((PIncomingCallError) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PDelegateFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public PDelegateFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PDelegateFlutterApiCodec.INSTANCE;
    }

    public void continueStartCallIntent(@NonNull PHandle handleArg, @Nullable String displayNameArg, @NonNull Boolean videoArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.continueStartCallIntent", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(handleArg, displayNameArg, videoArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void didPushIncomingCall(@NonNull PHandle handleArg, @Nullable String displayNameArg, @NonNull Boolean videoArg, @NonNull String callIdArg, @NonNull String uuidStringArg, @Nullable PIncomingCallError errorArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.didPushIncomingCall", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(handleArg, displayNameArg, videoArg, callIdArg, uuidStringArg, errorArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void performStartCall(@NonNull String uuidStringArg, @NonNull PHandle handleArg, @Nullable String displayNameOrContactIdentifierArg, @NonNull Boolean videoArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performStartCall", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg, handleArg, displayNameOrContactIdentifierArg, videoArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void performAnswerCall(@NonNull String uuidStringArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performAnswerCall", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void performEndCall(@NonNull String uuidStringArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performEndCall", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void performSetHeld(@NonNull String uuidStringArg, @NonNull Boolean onHoldArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performSetHeld", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg, onHoldArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void performSetMuted(@NonNull String uuidStringArg, @NonNull Boolean mutedArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performSetMuted", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg, mutedArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void performSendDTMF(@NonNull String uuidStringArg, @NonNull String keyArg, Reply<Boolean> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.performSendDTMF", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(uuidStringArg, keyArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        Boolean output = (Boolean)channelReply;
        callback.reply(output);
      });
    }
    public void didActivateAudioSession(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.didActivateAudioSession", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void didDeactivateAudioSession(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.didDeactivateAudioSession", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void didReset(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PDelegateFlutterApi.didReset", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class PPushRegistryHostApiCodec extends StandardMessageCodec {
    public static final PPushRegistryHostApiCodec INSTANCE = new PPushRegistryHostApiCodec();
    private PPushRegistryHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface PPushRegistryHostApi {
    @Nullable String pushTokenForPushTypeVoIP();

    /** The codec used by PPushRegistryHostApi. */
    static MessageCodec<Object> getCodec() {
      return PPushRegistryHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `PPushRegistryHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PPushRegistryHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PPushRegistryHostApi.pushTokenForPushTypeVoIP", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.pushTokenForPushTypeVoIP();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class PPushRegistryDelegateFlutterApiCodec extends StandardMessageCodec {
    public static final PPushRegistryDelegateFlutterApiCodec INSTANCE = new PPushRegistryDelegateFlutterApiCodec();
    private PPushRegistryDelegateFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class PPushRegistryDelegateFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public PPushRegistryDelegateFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return PPushRegistryDelegateFlutterApiCodec.INSTANCE;
    }

    public void didUpdatePushTokenForPushTypeVoIP(@Nullable String tokenArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.PPushRegistryDelegateFlutterApi.didUpdatePushTokenForPushTypeVoIP", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(tokenArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
